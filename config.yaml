# Config for analysis

# ----------------------------------------------------------------------------
# Relative paths from your top-level Snakefile to where you have the pipeline
# submodule cloned, and where you build the docs. Typically your top-level
# Snakefile will be in the root directory and paths will be `dms-vep-pipeline`
# and `./`, but in this example they are upstream from this subdirectory.
# ----------------------------------------------------------------------------
pipeline_path: dms-vep-pipeline
docs: docs

# ----------------------------------------------------------------------------
# Details on repo, used for docs. Change this to details for your project.
# ----------------------------------------------------------------------------
github_repo: flu_h3_hk19_dms
github_user: dms-vep
github_branch: main  # main branch for repo, assume renamed from master -> main
description: Deep mutational scanning of barcoded A/HongKong/45/2019
year: 2022
authors: Frances Welsh and Jesse Bloom

# ----------------------------------------------------------------------------
# Parameters for analysis
# ----------------------------------------------------------------------------
# Parameters for building PacBio CCS consensuses
max_ccs_error_rate: 1.0e-4  # only keep CCS if gene/barcode error rate <= this
consensus_params:  # parameters for building PacBio consensus sequences
  max_sub_diffs: null
  max_indel_diffs: null
  max_minor_sub_frac: 0.2
  max_minor_indel_frac: 0.2
  min_support: 2

# Parameters for processing Illumina barcodes
illumina_barcode_parser_params:
  upstream: GGCAACATCCGATGCAACATCTGTATATAATGAG
  downstream: ''
  minq: 20
  upstream_mismatch: 1
  downstream_mismatch: 0
  bc_orientation: R2

# Require samples to have an average of >= this many counts per variant.
# Error raised for any sample with < this many counts unless it is specified
# for `exclude_after_counts` in `barcode_runs`
min_avg_counts: 10  # consider value more like ~20 for real pipelines

# Parameters for antibody escape-probability calculation.
# Require neut standard to have at least this many counts
# and this much fraction of total counts or raise error:
prob_escape_min_neut_standard_count: 1000
prob_escape_min_neut_standard_frac: 0.0001 # dropped to account for low neut std in 220419 run
# Only compute escape probabilities for variants with at least this many
# counts and this fraction of total counts in no-antibody sample:
prob_escape_min_no_antibody_counts: 15
prob_escape_min_no_antibody_frac: 0.000002 # set to 0.1/libB size (50k variants)
#prob_escape_min_antibody_counts: 30 # 2x the min_no_antibody_counts threshold
#prob_escape_min_antibody_frac: 0.00004 # set to 2/libB size (50k variants)
# when averaging antibody escape values, take the "median" or "mean"?
escape_avg_method: median

# Parameters for functional scores and global epistasis analysis
func_scores_pseudocount: 0.5  # pseudocount when computing functional scores
func_scores_min_wt_count: 1000  # require this many wildtype counts or error
func_scores_min_wt_frac:  0.001  # require this fraction of all counts for wildtype or error
# Only fit global epistasis models for variants with at least this many
# pre-selection counts and this fraction of total pre-selection counts
func_scores_min_preselection_counts: 15
func_scores_min_preselection_frac: 0.000002  # make smaller for large libraries, say 0.1 / (library size)

# when plotting mut effects on viral entry, initially require mutation seen in this many variants:
plot_muteffects_min_times_seen: 3
# when averaging mutation effects on viral entry, take the "median" or "mean"?
muteffects_avg_method: median
# keyword arguments to `polyclonal.plot.lineplot_and_heatmap` for plotting functional effects
muteffects_plot_kwargs:
  addtl_slider_stats:
    times_seen: 3
  heatmap_max_at_least: 1
  heatmap_min_at_least: -1
  init_floor_at_zero: False
  slider_binding_range_kwargs:
    n_libraries:
      step: 1
    times_seen:
      step: 1
      min: 1
      max: 25

PDB: data/PDBs/4o5n.pdb 

show_antibody_escape_icXX_plots: false       

# ----------------------------------------------------------------------------
# Input data to dms-vep-pipeline
# ----------------------------------------------------------------------------
# PacBio sequencing
pacbio_runs: data/PacBio_runs.csv  # PacBio sequencing data
pacbio_amplicon: data/PacBio_amplicon.gb  # Genbank file with PacBio amplicon
pacbio_amplicon_specs: data/PacBio_feature_parse_specs.yaml  # alignparse feature parsing
variant_tags: # variant tags in PacBio amplicon, or "null" if no tags
  null

# Map sequential 1, 2, numbering of gene in PacBio amplicon to the desired
# final reference numbering scheme. Unlike in the `dms-vep-pipeline`
# test example, here we create this mapping from the Genbank accession.
# numbering_reference_accession: QHD43416.1  
# TODO: set up numbering reference. Currently just using a file in data
site_numbering_map: data/site_map.csv # currently 

# Classify mutations into different categories, such as which ones are
# designed to be in the library.
mutation_design_classification: library_design/aggregated_mutations.csv
# TODO: not sure if this is still necessary?
designed_mutation_types:  # types of designed mutations in order handled
  - paired_epitope_mutation
  - epitope_mutation
  - viable_mutation

# Neutralization standard barcodes
neut_standard_barcodes: data/neutralization_standard_barcodes.csv

# Illumina barcode sequencing
barcode_runs: data/barcode_runs.csv

# configuration for polyclonal fitting
polyclonal_config: data/polyclonal_config.yaml
fit_polyclonal_threads: 2  # threads to use per fit (ie, for bootstrapping)

# ----------------------------------------------------------------------------
# Names of output directories / files
# ----------------------------------------------------------------------------
# directory with logs from running snakemake steps
logdir: results/logs

# gene sequence extracted from PacBio amplicon
gene_sequence_codon: results/gene_sequence/codon.fasta
gene_sequence_protein: results/gene_sequence/protein.fasta

# processing of PacBio CCSs to create codon-variant table
process_ccs_dir: results/process_ccs
aligned_ccs_file: results/process_ccs/CCSs_aligned_to_amplicon.csv
nt_variants: results/variants/nt_variants.csv
codon_variants: results/variants/codon_variants.csv

# barcode sequencing
processed_barcode_runs: results/barcode_runs/processed_barcode_runs.csv
barcode_counts_dir: results/barcode_runs/counts_by_sample
barcode_counts_invalid_dir: results/barcode_runs/counts_invalid_by_sample
barcode_fates_dir: results/barcode_runs/fates_by_sample

# variant counts
variant_counts_dir: results/variant_counts
variant_avg_counts_plot: results/variant_counts/avg_counts_per_variant.html
variant_avg_counts_csv: results/variant_counts/avg_counts_per_variant.csv

# escape probabilities for antibody selections
prob_escape_dir: results/prob_escape
antibody_selections: results/prob_escape/antibody_selections.csv

# polyclonal fitting directory
polyclonal_dir: results/polyclonal_fits

# antibody-escape values
escape_dir: results/antibody_escape

# functional scores for functional selections
func_score_dir: results/func_scores
functional_selections: results/func_scores/functional_selections.csv

# global epistasis fitting directory
globalepistasis_dir: results/globalepistasis_fits

# mutation effects on function (viral entry) averaged over replicates
muteffects_observed: results/muteffects_functional/muteffects_observed.csv
muteffects_latent: results/muteffects_functional/muteffects_latent.csv
muteffects_observed_heatmap: results/muteffects_functional/muteffects_observed_heatmap.html
muteffects_latent_heatmap: results/muteffects_functional/muteffects_latent_heatmap.html

# html documentation
docs_source_dir: results/docs_source
